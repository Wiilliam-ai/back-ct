// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Role {
  id        String   @id @default(cuid()) 
  doUser    Boolean
  doAdmin   Boolean
  doDevelop Boolean

  user User?
}

model Avatar {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User?
  student Student?
  instructor Instructor?

  @@map("avatars")
}

model Signature {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student Student?
  instructor Instructor?

  @@map("signatures")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String

  avatar   Avatar  @relation(fields: [avatarId], references: [id])
  avatarId String @unique

  role  Role   @relation(fields: [roleId], references: [id])
  roleId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  module Module[]
  student Student[]
  instructor Instructor[]
  event Event[]

  @@map("users")
}

model TypeModule {
  id        Int     @id @default(autoincrement())
  name      String

  modules Module[]

  @@map("type_modules")
}

model Module {
  id        Int     @id @default(autoincrement())
  name      String
  typeModule TypeModule @relation(fields: [typeModuleId], references: [id])
  typeModuleId Int

  user User @relation(fields: [userId], references: [id])
  userId    String

  events Event[]

  @@map("modules")
}

model Student {
  id        String   @id @default(cuid())
  cardId    String?   @unique
  name      String
  email     String
  phone     String
  address   String?
  avatar    Avatar?  @relation(fields: [avatarId], references: [id])
  avatarId  String? @unique

  user User @relation(fields: [userId], references: [id])
  userId    String

  signature Signature? @relation(fields: [signatureId], references: [id])
  signatureId String? @unique

  deleted  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@map("students")
}

model Instructor {
  id        String   @id @default(cuid())
  cardId    String    @unique
  name      String
  email     String    @unique
  phone     String
  address   String?
  profession String
  avatar    Avatar  @relation(fields: [avatarId], references: [id])
  avatarId  String @unique

  user User @relation(fields: [userId], references: [id])
  userId    String

  signature Signature? @relation(fields: [signatureId], references: [id])
  signatureId String? @unique

  deleted  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events Event[]

  @@map("instructors")
}

model Event {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId String

  module Module @relation(fields: [moduleId], references: [id])
  moduleId Int

  student Student @relation(fields: [studentId], references: [id])
  studentId String

  instructor Instructor @relation(fields: [instructorId], references: [id])
  instructorId String

  dateInit DateTime
  dateEnd  DateTime

  deleted  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}